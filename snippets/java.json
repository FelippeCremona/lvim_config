{
    "joinColum": {
        "prefix": "_joinColum",
        "body": [
            "@JoinColumn(name = \"${1:FK}\", referencedColumnName=\"${2:PK}\")"
        ],
        "description": "Relaciona tabelas diferentes"
    },
    "oneToMany": {
        "prefix": "_oneToMany",
        "body": [
            "@OneToMany(fetch=FetchType.EAGER)",
            "@JoinColumn(name = \"${1:FK}\", referencedColumnName=\"${2:PK}\")",
            "private List<${3:object}> lista${3} = new ArrayList<${3}>();"
        ],
        "description": "Mapeia relacionamentos um para muitos"
    },
    "manyToOne": {
        "prefix": "_manyToOne",
        "body": [
            "@ManyToOne",
            "@JoinColumn(name = \"${1:FK}\")",
            "private ${3:object} ${4:name};"
        ],
        "description": "Mapeia relacionamentos muitos para um"
    },
    "listar_criteria": {
        "prefix": "_listar_criteria",
        "body": [
            "public List<${1:object}> listar${1}() {",
                "    CriteriaBuilder criteriaBuilder = this.em.getCriteriaBuilder();",
                "    CriteriaQuery<${1}> query = criteriaBuilder.createQuery(${1}.class);",
                "",
                "    //Root<${1}> root = query.from(${1}.class);",
                "",
                "    //Adiciona where",
                "    //if(parametro != null) query.where(criteriaBuilder.equal(root.get(\"parametro\").get(\"id\"), parametro));",
                "",
                "    //Adiciona ordenamento",
                "    //query.orderBy(Arrays.asList(criteriaBuilder.asc(root.get(\"nome\"))));",
                "",
                "    return this.em.createQuery(query).getResultList();",
                "}"
        ],
        "description": "Cria Criteria para listar objetos"
    },
    "date_format": {
        "prefix": "_date_format",
        "body": [
            "SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");",
            "format.format(${1:date});"
        ],
        "description": "Formata objeto do tipo Date convertendo para String"
    },
    "native_query_single": {
        "prefix": "_native_query_single",
        "body": [
            "public ${1:objeto} ${2:nomeMetodo} (){",
            "       StringBuilder sql = new StringBuilder();",
            "       sql.append(\"${3:query}\");",
            "       Query query = em.createNativeQuery(sql.toString());",
            "       //query.setParameter();",
            "       return (${1}) query.getSingleResult();",
            "}"
        ],
        "description": "Cria query nativa retornando um unico resultado"
    },
    "native_query_list": {
        "prefix": "_native_query_list",
        "body": [
            "public List<${1:objeto}> ${2:nomeMetodo} (){",
            "       StringBuilder sql = new StringBuilder();",
            "       sql.append(\"${3:query}\");",
            "       Query query = em.createNativeQuery(sql.toString());",
            "       //query.setParameter();",
            "       return (List<${1}>) query.getResultList();",
            "}"
        ],
        "description": "Cria query nativa retornando uma lista de resultados"
    }
}
